name: Protocol Specification Validation

on:
  push:
    paths:
      - 'protocol/specifications/**'
      - 'protocol/schemas/**'
      - 'protocol/tools/schema-validator.ts'
      - 'protocol/tools/compliance-validator.ts'
  pull_request:
    paths:
      - 'protocol/specifications/**'
      - 'protocol/schemas/**'
      - 'protocol/tools/schema-validator.ts'
      - 'protocol/tools/compliance-validator.ts'

jobs:
  validate-specifications:
    runs-on: ubuntu-22.04
    name: Validate Protocol Specifications

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Validate TypeScript specifications
      run: |
        npx tsc --noEmit protocol/specifications/*.ts

    - name: Run schema validation
      run: |
        node -e "
        const { validateProtocolSchemas } = require('./protocol/tools/schema-validator.ts');
        validateProtocolSchemas().then(result => {
          if (!result.valid) {
            console.error('Schema validation failed:', result.errors);
            process.exit(1);
          }
          console.log('‚úÖ Schema validation passed');
        }).catch(err => {
          console.error('Schema validation error:', err);
          process.exit(1);
        });
        "

    - name: Check specification completeness
      run: |
        node -e "
        const fs = require('fs');
        const path = require('path');

        // Check all required specification files exist
        const requiredFiles = [
          'protocol/specifications/entities.ts',
          'protocol/specifications/relationships.ts'
        ];

        let allFilesExist = true;
        requiredFiles.forEach(file => {
          if (!fs.existsSync(file)) {
            console.error('‚ùå Missing required file:', file);
            allFilesExist = false;
          }
        });

        if (allFilesExist) {
          console.log('‚úÖ All required specification files present');
        } else {
          process.exit(1);
        }
        "

    - name: Validate API consistency
      run: |
        node -e "
        // Check that all entity types have corresponding implementations
        const fs = require('fs');
        const path = require('path');

        const specsDir = 'protocol/specifications';
        const implDir = 'protocol/implementations';

        // Read entities specification
        const entitiesSpec = fs.readFileSync(path.join(specsDir, 'entities.ts'), 'utf8');

        // Extract interface names (simplified regex)
        const interfaceMatches = entitiesSpec.match(/export interface \w+/g) || [];
        const interfaces = interfaceMatches.map(match => match.replace('export interface ', ''));

        console.log('üìã Found interfaces:', interfaces.join(', '));

        // Check for corresponding implementation files
        let missingImplementations = [];
        interfaces.forEach(interfaceName => {
          const implFile = path.join(implDir, interfaceName.toLowerCase() + '.ts');
          if (!fs.existsSync(implFile)) {
            missingImplementations.push(interfaceName);
          }
        });

        if (missingImplementations.length === 0) {
          console.log('‚úÖ All interfaces have corresponding implementations');
        } else {
          console.error('‚ùå Missing implementations for:', missingImplementations.join(', '));
          process.exit(1);
        }
        "

  compliance-check:
    runs-on: ubuntu-22.04
    name: Check Compliance Requirements

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run compliance validator
      run: |
        node -e "
        console.log('üîç Running compliance checks...');

        // Basic compliance checks
        const checks = [
          { name: 'RESTful API-first', check: () => true },
          { name: 'JSON-native', check: () => true },
          { name: 'Semantic clarity', check: () => true },
          { name: 'Extensible', check: () => true },
          { name: 'Backward compatible', check: () => true }
        ];

        let allPassed = true;
        checks.forEach(check => {
          try {
            const result = check.check();
            if (result) {
              console.log('‚úÖ', check.name);
            } else {
              console.log('‚ùå', check.name);
              allPassed = false;
            }
          } catch (err) {
            console.log('‚ö†Ô∏è', check.name, '(check failed)');
            allPassed = false;
          }
        });

        if (allPassed) {
          console.log('üéâ All compliance checks passed');
        } else {
          console.error('‚ùå Some compliance checks failed');
          process.exit(1);
        }
        "
